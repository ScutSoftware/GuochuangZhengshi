package com.lis.web.controller;

import java.sql.Date;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.lis.model.ComplaintText;
import com.lis.model.ServiceRequestType;
import com.lis.service.ComplaintTextRecordQueryPageService;
import com.lis.service.ServiceRequestTypeService;
import com.lis.util.ConditionQuery;
import com.lis.util.OrderBy;
import com.lis.service.ParticipleAndFilterService;
import com.lis.service.ClusterService;


@Controller
@RequestMapping("complaintTextRecordQuery/")

public class ComplaintTextRecordQueryPageController {

	@Autowired
	private ComplaintTextRecordQueryPageService  complaintTextService;
	
	@Autowired
	private  ServiceRequestTypeService  serviceRequestTypeService;
	
	@Autowired
	private ParticipleAndFilterService participleAndFilterService;
	
	@Autowired
	private ClusterService clusterService;

	
	//条件查询投诉文本并聚类出对应主题词
	@RequestMapping(value="getComplaintText",method=RequestMethod.POST)
	public @ResponseBody Object getComplaintText(
			@RequestParam(value="starttime")Date starttime,
		    @RequestParam(value="finishtime")Date finishtime)
		//	@RequestParam(value="serviceRequestType")int serviceRequestType)
			{
		System.out.println("-----getComplaintText-----");
		List<ComplaintText>complaintTexts=new ArrayList<ComplaintText>();
		List<String>gist=new ArrayList<String>();
		try{
			//1.1条件查询投诉文本
			ConditionQuery query = new ConditionQuery();
			OrderBy orderBy = new OrderBy();
			//query.add(Restrictions.between("processTime",starttime,finishtime));
			//ServiceRequestType serviceType=new ServiceRequestType();
			//serviceType.setServiceRequestTypeIDPK(serviceRequestType);
            //query.add(Restrictions.eq("serviceRequestTypeFK", serviceType));
            complaintTexts= complaintTextService.list(query, orderBy, false);
            //1.2聚类投诉文本的主题词
            List<String>none=participleAndFilterService.getNounsFromCompContent(complaintTexts);
             gist=clusterService.megaOutPut(none);
		} catch (Exception e) {
			e.printStackTrace();
	}

		Map<String, Object> map = new HashMap<String, Object>();
		map.put("complaintTextList",  complaintTexts);
		map.put("gistlist",gist);
		map.put("success", true);
		return "ComplaintTextRecordQuery/queryResult";	
}
	//获取一级下拉列表信息
	@RequestMapping(value="getServiceType1",method=RequestMethod.GET)
	public  void getServiceType1(ModelMap map){
	        
		    System.out.println("-----getServiceType1-----");
	        try{  
	        	ConditionQuery query=new ConditionQuery();
	            query.add(Restrictions.between("serviceRequestTypeFK", 01,11));
	            OrderBy orderBy = new OrderBy();
	        	List<ServiceRequestType>serviceTypeList=serviceRequestTypeService.list(query,orderBy,false);
	        	if(serviceTypeList==null){
	        		map.put("success", false);
	        		//return null;
	        	}
	        	else{
	        		map.put("ServiceRequestType1", serviceTypeList);
	        		//return 1;
	        	}
	        }catch(Exception e){
				e.printStackTrace();
				map.put("success", false);
	        }
	 }
	
	//获取子级下拉列表信息
	@RequestMapping(value="getServiceTypeN",method=RequestMethod.GET)
	public @ResponseBody Object getServiceType2(
		   @RequestParam (value="parentID")int parentServiceType ){
		System.out.println("-----getServiceTypeN-----");
		String parentID=Integer.toString(parentServiceType);
		Map<String, Object> map = new HashMap<String, Object>();
		try{
			ConditionQuery query=new ConditionQuery();
			OrderBy orderBy = new OrderBy();
			query.add(Restrictions.like("serviceRequestTypeFK", parentID, MatchMode.START));
			query.add(Restrictions.sizeEq("serviceRequestTypeFK", 4));
			List<ServiceRequestType>serviceTypeList=serviceRequestTypeService.list(query,orderBy,false);
        	if(serviceTypeList==null){
        		map.put("success", false);
        		//return null;
        	}
        	else{
        		map.put("ServiceRequestType1", serviceTypeList);
        		//return 1;
        	}
        }catch(Exception e){
			e.printStackTrace();
			map.put("success", false);
        }	
		return map;
		}	
	//调用分类函数
}
	
