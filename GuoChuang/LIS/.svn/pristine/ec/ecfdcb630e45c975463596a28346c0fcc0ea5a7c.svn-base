package com.lis.web.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONArray;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.lis.model.ComplaintText;
import com.lis.model.IntermediateWord;
import com.lis.model.ProblemDetail;
import com.lis.model.ProblemType;
import com.lis.service.ClusterService;
import com.lis.service.KeywordCorrectAndFeedbackPageService;
import com.lis.service.ParticipleAndFilterService;
import com.lis.service.PrioritySortService;
import com.lis.service.SegmentationService;

@Controller
@RequestMapping("segmentation/")
public class SegmentationController {

	@Autowired
	private SegmentationService segmentationService;
	
	@Autowired
	private ParticipleAndFilterService participleAndFilterService;
	
	@Autowired
	private PrioritySortService prioritySortService;
	
	@Autowired 
	private KeywordCorrectAndFeedbackPageService keywordCorrectAndFeedbackPageService;
	
	@Autowired
	private ClusterService clusterService;
	
	
	@RequestMapping(value = "getServiceRequestType", method = RequestMethod.GET)
	public  String getServiceRequestType(ModelMap map){
		
		return "segmentation/query";
	}
	//用于重复跳转自己的页面
	@RequestMapping(value = "getServiceRequestTypeChange", method = RequestMethod.GET)
	public  @ResponseBody Object getServiceRequestTypeChange(HttpSession session){
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			Map<String, Double> wordPoint = (Map<String, Double>) session.getAttribute("wordPoint");
			List<String> wordList = new ArrayList<String>();
			for(Entry<String, Double> entry : wordPoint.entrySet()) {
				wordList.add(entry.getKey());
			}
			map.put("wordList", wordList);
			map.put("success", true);
		}catch(Exception e) {
			e.printStackTrace();
			map.put("success", false);
		}
		return map;
	}
	
	//获取选中文本记录的短语,问题细项，问题类型
	@RequestMapping(value="getComplaintTextPhrase", method = RequestMethod.POST)
	public @ResponseBody Object getComplaintTextPhrase(
			@RequestParam(value="sentence") String sentence,
			HttpSession session) {
		System.out.println("getComplaintTextPhrase-----------------" + sentence);
		Map<String, Object> map = new HashMap<String, Object>();
		
		List<String> phrases = participleAndFilterService.getDuanYuFromCompContent(sentence);
		
		@SuppressWarnings("unchecked")
		List<ComplaintText> complaintTextList = (List<ComplaintText>) session.getAttribute("complaintTextList");
		
		ProblemDetail problemDetail = new ProblemDetail();
		
		ProblemType problemType = new ProblemType();
		
		for(int i = 0; i < complaintTextList.size(); i++) {
			if(sentence.equals(complaintTextList.get(i).getComplaintContent())) {
				problemDetail = complaintTextList.get(i).getProblemDetailFK();
				problemType = complaintTextList.get(i).getProblemTypeFK();
			}
		}
		for(int i = 0 ; i < phrases.size() ; i++) {
			System.out.println(phrases.get(i));
		}
		map.put("duanyu", phrases);
		map.put("problemDetail", problemDetail.getProblemDetailName());
		map.put("problemType", problemType.getProblemTypeName());
		map.put("success", true);
		return map;
	}
	
	//从数据库中获取所有的投诉文本记录,并对投诉文本记录进行分词和抽取主题词
	@RequestMapping(value = "getComplaintTextRecordsAndBussinessKeyword", method = RequestMethod.GET)
	public @ResponseBody Object getComplaintTextRecordsAndBussinessKeyword(
			@RequestParam(value="startTime")String startTime,
			@RequestParam(value="endTime")String endTime,
			@RequestParam(value="allCodeID")String allCodeID,
			HttpSession session
			){
		System.out.println("startTime:" + startTime);
		System.out.println("endTime:" + endTime);
		System.out.println(allCodeID);
		Map<String, Object> map = new HashMap<String, Object>();
		
		try {			
			
			//获取数据库中文本记录
			List<ComplaintText> complaintTextList = segmentationService.getTextRecords(startTime,endTime,allCodeID);
			
			System.out.println("从数据库抽取的文本记录数量" + complaintTextList.size());
			
			//System.out.println(complaintTextList.get(0).getComplaintContent());
			//对文本记录进行分词和抽取名词处理
			List<String> nonusList = participleAndFilterService.getNounAdjVerbs(complaintTextList);
			//List<String> test = participleAndFilterService.getDuanYuFromCompContent("我要去打飞机") ;
			//for(int i = 0 ; i < test.size() ; i ++){
			//	System.out.print(test.get(i));
		    //	}
			////根据要求输出相应的排序好的词组（（由方法一二得））
			
			
			
			List<String> keywordList =  clusterService.megaOutPut(nonusList);
			double[] point = clusterService.outPoint();
			
			List<String> method1List = clusterService.method1(nonusList);
			List<String> method2List = clusterService.method2(nonusList);
			
			LinkedHashMap<String, Double> wordPoint = new LinkedHashMap<String, Double>();
			
			if(keywordList.size() != 0) {
				for(int i = 0; i < keywordList.size(); i++) {
					wordPoint.put(keywordList.get(i), point[i]);
				}
			}
			
			System.out.println(keywordList.size());
			
			if(keywordList ==null && complaintTextList==null)
				map.put("success", false);
			else{
				session.setAttribute("wordPoint", wordPoint);
				session.setAttribute("method1", method1List);
				session.setAttribute("method2", method2List);
				session.setAttribute("complaintTextList", complaintTextList);
				map.put("keywordList", keywordList);
				map.put("complaintTextList", complaintTextList);
				map.put("success", true);
			}
			return map;
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			map.put("success", false);
			return map;
		}
	}
	
	//获取匹配的投诉文本记录（List<ComplaintText> 投诉文本记录对象的list,String[] keyWords关键词数组）
	@RequestMapping(value = "getMatchingComplaintTexts", method = RequestMethod.GET)
	public @ResponseBody Object getMatchingComplaintTexts(
			@RequestParam(value="startTime")String startTime,
			@RequestParam(value="endTime")String endTime,
			@RequestParam(value="keyword")String keyword,HttpServletRequest req){
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			keyword = new String(keyword.getBytes("ISO-8859-1"), "UTF-8");
			System.out.println("--------------------------------------------------------------");
			System.out.println(keyword);
			//获取数据库中文本记录
			List<ComplaintText> complaintTextList = segmentationService.getTextRecords(startTime,endTime);
			
			String[] keyWords = {keyword};			
			
			List<String> matchingComplaintTexts = segmentationService.getMatchingTexts(complaintTextList, keyWords);
			
			for(int i = 0; i < matchingComplaintTexts.size();i++){
				System.out.println(matchingComplaintTexts.get(i));
			}
			
			map.put("matchingComplaintTexts", matchingComplaintTexts);
			map.put("success", true);
//			return "segmentation/matchResult";
			return map;
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			map.put("success", false);
			return map;
//			return "segmentation/matchResult";
		}
		
	}
	
	@RequestMapping(value="addKeyWork", method=RequestMethod.POST)
	public @ResponseBody Object addKeyWord(HttpSession session, HttpServletRequest request,
			HttpServletResponse response) {
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		JSONArray jsonArray1 = JSONArray.fromObject(request.getParameter("word"));
		
		
		
		//通过前端传回来的json得到method1和method2的词
		List<String> word = JSONArray.fromObject(jsonArray1);
//		List<String> method1 = JSONArray.fromObject(jsonArray2);
//		List<String> method2 = JSONArray.fromObject(jsonArray3);
		
		//通过session得到的method1和 method2的词
		List<String> method1List = (List<String>) session.getAttribute("method1");
		List<String> method2List = (List<String>) session.getAttribute("method2");
		
		//计算新顺序的关键词分数
		prioritySortService.keywordSort(word, method1List, method2List);
		
		//将从前端获得字符串返回前端显示，进行关联x
		map.put("wordList2", word);
		map.put("success", true);
		return map;
	}
	
	//从前端得到关键词之间的关联关系，
	//keyword（单选词）
	//关联
	//list（多选词）
	@RequestMapping(value="getRelatedWord",method=RequestMethod.POST)
	public String getRelatedWord(Model model,
			HttpSession session,
			@RequestParam(value="keyWord") String keyWord,
			@RequestParam(value="list")String[] list) {
		
		List<String> wordList = new ArrayList<String>();
		for(String s : list) {
			System.out.println(s);
			wordList.add(s);
		}
		
		System.out.println(keyWord);
		Map<String, Double> wordPoint = (Map<String, Double>) session.getAttribute("wordPoint");
		double score = keywordCorrectAndFeedbackPageService.synthesisArithmetic(wordList, wordPoint);
		System.out.println(score);
		keywordCorrectAndFeedbackPageService.saveScore(keyWord, list, score);
//		keywordCorrectAndFeedbackPageService.clear();
		model.addAttribute("score", score); 	
		
		return "keyword/score";
	}
}
